---
title: "Random Forest cleaned"
format:
  html:
    embed-resources: true
    toc: true
    number-sections: true
    colorlinks: true
---

```{r, message = F}
rm(list=ls())
library(dplyr); library(randomForest); library(forcats); library(ggplot2)
```

## Data
```{r, message = F}
df <- readRDS("Predictors_cleaned.rds")

# Create grouping variables for modelling in loop:
cols <- names(df)

# Response:
cols_logR <- cols[-which(cols == "Telfer_1_2")]
cols_telfer <- cols[-which(cols == "log_R2_1")]

# Group for predictor columns:
# Geometry
cols_g1 <- c("D_AOO_a", # Fractal dimension
             "nsDist", "elonRatio", "circNorm", "relCirc", "lin",  # Species distribution geometric features
             "minDist_toBorder", "minDist_toBorder_centr", # Distances
             "Southernness", "Westernness", 
             "moran", "x_intercept", # Spatial autocorrelation
             "atlas_circNorm", "atlas_relCirc", # Atlas predictors
             "dataset") # captures most of the geometry of the atlases (highly correlated)

# Traits
cols_g2 <- c("relative_occupancy_Ncells", # Occupancy 
             "RL_Category", # Global red list categories
             "Family", "Order", "FP", # Evolutionary relationships
             "HWI", # Dispersal
             "Mass", 
             "Habitat", "Habitat.Density", "Migration", "Trophic.Level", "Trophic.Niche", "Primary.Lifestyle", # Life history traits
             "Range.Size", # Global range size (Breeding & Resident)
             "sd_PC1", "sd_PC2") # Climatic Niche Breadth

# Diversity
cols_g3 <- c("AlphaSR_sp", "BetaSR_sp", #Alpha and beta diversity
             "Dist_toCOD",  # Distance from species centroid to center of gravity of the atlas
             "CenterOfGravity_Atlas_lat", # latitude of center of gravity of the atlas
             "sp_COG_long","sp_COG_lat") # species distribution centroid coordinates) # Distance from species centroid to center of gravity of the atlas

```

## Split data into future and past change for modelling:

```{r}
# Log Ratio df
df_log_R <-  df %>% 
  select(all_of(cols_logR)) %>%
  distinct(tp, dataset, verbatim_name, .keep_all = T) %>%
  filter(!is.na(log_R2_1))

df_log_R1 <- df_log_R %>% filter(tp == 1) %>% select(-tp, -verbatim_name) # Future Change
df_log_R2 <- df_log_R %>% filter(tp == 2) %>% select(-tp, -verbatim_name) # Past Change



# Telfer df
df_telfer <- df %>% 
  select(all_of(cols_telfer)) %>%
  distinct(tp, dataset, verbatim_name, .keep_all = T) %>%
  filter(!is.na(Telfer_1_2))

df_telfer1 <- df_telfer %>% filter(tp == 1) %>% select(-tp, -verbatim_name) # Future Change
df_telfer2 <- df_telfer %>% filter(tp == 2) %>% select(-tp, -verbatim_name) # Past Change



# Create list of data frame:
dfs_list <- list(df_log_R1, df_log_R2, df_telfer1, df_telfer2)
names(dfs_list) <- c("df_log_R1", "df_log_R2", "df_telfer1", "df_telfer2")

```

## Build models

```{r}
# create empty lists
models_list <- list()
models_res_list <-list()
pred_list <- list()

# loop through list of model dataframes
for (dd in seq_along(dfs_list)){
  model_df <- dfs_list[[dd]]
  
  # split into test and train #
  set.seed(123)
  samp <- sample(nrow(model_df), 0.8 * nrow(model_df))
  train <- model_df[samp, ]; dim(train) 
  test <- model_df[-samp, ]; dim(test) 

  # create response variable
  response_var <- if ("log_R2_1" %in% names(train)) "log_R2_1" else if ("Telfer_1_2" %in% names(train)) "Telfer_1_2" 

  
  # build models # 
  model <- randomForest(as.formula(paste(response_var, "~ .")), data = train,
                         ntree=150, importance=TRUE, na.action = "na.omit")
  # predict test data #
  data_pred <- data.frame(Predicted = predict(model, newdata = test), Observed = test[[response_var]])
  
  models_list[[dd]] <- model    
  pred_list[[dd]] <- data_pred
  
  # extract model results # 
  imp <- as.data.frame(model$importance[,1])
  names(imp) <- c("Importance")
  imp$var <- rownames(imp)
  imp2 <- imp %>% 
    tidyr::pivot_wider(names_from = var,
                       values_from = Importance)
  # create summary df
  model_res <- data.frame(
    df = names(dfs_list)[[dd]],
    mean_pseudo_R2 = mean(model$rsq),
    mean_mse = mean(model$mse),
    imp2) # add variable importance for each predictor
  
  models_res_list[[dd]] <- model_res
  
}


models_res_df <- plyr::rbind.fill(models_res_list)

```

## Quick visualization:

```{r}
# Decrease of OOB MSE (?)

mse_dfs <- list()
for (i in seq_along(models_list)){
  decrease_mse <- data.frame(Decr_OOB_MSE = importance(models_list[[i]], type = 1),
                            data = case_when(i == 1 ~ "log_R_future",
                                             i == 2 ~ "log_R_past",
                                             i == 3 ~ "telfer_future",
                                             i == 4 ~ "telfer_past"))
  decrease_mse$var <- rownames(decrease_mse)
  decrease_mse <- decrease_mse %>% mutate(group = case_when(
    var %in% cols_g1 ~ "geometry",
    var %in% cols_g2 ~ "traits",
    var %in% cols_g3 ~ "diversity")) %>% 
  rename("Decr_OOB_MSE" = "X.IncMSE")
  mse_dfs[[i]] <- decrease_mse
}

mse_df <- plyr::rbind.fill(mse_dfs)

# Figure:
mse_df %>% 
  group_by(data) %>%
  filter(data %in% c("log_R_future", "log_R_past")) %>%
  
  ggplot2::ggplot(aes(y = fct_reorder(var, Decr_OOB_MSE), x = Decr_OOB_MSE, fill = group))+
  geom_col()+
  facet_wrap(data~.)+
  xlab("Decrease of out-of-bag MSE")+
  ylab("Predictor")+
  theme_minimal()

```

