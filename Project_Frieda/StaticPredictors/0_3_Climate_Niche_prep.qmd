---
title: "0_2_Climate_Niche_prep"
format: html
editor: visual
---

## Libraries

```{r, message = F}
rm(list=ls())
gc()
library(sf)
sf_use_s2(FALSE)
library(terra)
library(dplyr)
library(ggplot2)
library(ggfortify)

pacman::p_load(rasterSp, climateNiche) ### require dependencies to be installed (see GitHub of these packages)

```

## Variables

```{r}

source_Git <- c("c:/Users/wolke/OneDrive - CZU v Praze/Dokumenty/GitHub/BEAST_General_Procedures/Project_Frieda/StaticPredictors/")

# folder path to output folder
out_path <- c(paste0(source_Git, "out/"))
source_predictors <- c("c:/Users/wolke/OneDrive - CZU v Praze/Dokumenty/PhD_Projects/StaticPredictors/Data/")
CHELSA_path <- paste0(source_predictors, "Chelsa_Bio_PET/")
CGIAR_path <- paste0(source_predictors, "CGIAR_PET/")

all_predictors <- readRDS(paste0(out_path, "All_predictors.rds"))
name_vector <- all_predictors %>% 
  dplyr::select(verbatim_name) %>% 
  na.omit() %>% 
  pull() %>% 
  unique() %>% 
  as.vector() 

# List all the .tif files in the directory
tif_files <- list.files(path=CHELSA_path, pattern = ".tif$")
# The input file geodatabase from BirdLife International
fgdb <-"c:/Users/wolke/OneDrive - CZU v Praze/Datasets/Raw/Distributions/Birds_of_the_world/BOTW.gdb"

```

## Read + Aggregate CHELSA

```{r}
sf_use_s2(FALSE)
climate_stack <- rast(paste0(CHELSA_path, tif_files))
# Define the target resolution in meters
target_resolution <- c(110)  # 10x10km
  
# Aggregate the raster stack to the target resolution
climate_stack_agg <- aggregate(climate_stack, ## This takes a couple of minutes.
                               fact = target_resolution, 
                               fun = mean)
saveRDS(climate_stack_agg, paste0(out_path, "climate_stack_agg.rds"))
```

### PCA #2: on raw climate data

-   includes x and y into PCA

-   scale? center?

```{r, eval = F}
Chelsa_df <- readRDS(paste0(out_path, "CHELSA_df.rds"))
Chelsa_sf <- st_as_sf(Chelsa_df, coords = c("x", "y"), crs = 4326)

clim_matrix <- Chelsa_df %>% select( -id) 
pca_result1 <- prcomp(clim_matrix, scale = T, center = T)
pca_result2 <- prcomp(clim_matrix)

# Compare scaled + centerd against untransformed:
summary(pca_result1) ## Low fit: Need 3 axes to cover 75% of variation
summary(pca_result2) ## Very high fit: Need 2 axes to cover 98% of variation

PCAs <- as.data.frame(pca_result$x[,1:2])

autoplot(pca_result, data = clim_matrix) 
autoplot(pca_result, data = PCAs)
biplot(pca_result)

library(ggbiplot)
g <- ggbiplot(pca_result,
              obs.scale = 1,
              var.scale = 1,
              ellipse = TRUE,
              circle = TRUE,
              ellipse.prob = 0.68)

g

```

## BirdLife International Range maps

Reduce range maps to

-   species in the data

-   columns needed for the analysis

Merge with taxonomic information

```{r, eval = F, include = T}
# All_sp <- st_read(fgdb, layer = "All_Species") # Takes ~ 30 minutes to read in
# saveRDS(All_sp, paste0(out_path, "BOTW_All_species.rds"))

All_sp <- readRDS(paste0(out_path, "BOTW_All_species.rds"))

All_sp_red <- All_sp %>% 
  filter(sci_name %in% name_vector) %>% 
  select(sci_name, presence, origin, seasonal, Shape_Length, Shape_Area, Shape) %>%
  filter(seasonal %in% c(1,2) & origin %in% c(1,2) & presence %in% c(1,2,3))

Tax_sp <- st_read(fgdb, layer = "Taxonomic_checklist") # Global Red List status
Tax_sp_red <- Tax_sp %>% 
  filter(ScientificName %in% name_vector) %>% 
  select(Subfamily, Tribe, ScientificName, RL_Category) %>% 
  unique() %>% 
  rename("sci_name" = "ScientificName")

BirdLife <- left_join(All_sp_red, Tax_sp_red)
saveRDS(BirdLife, paste0(out_path, "BirdLife_reduced.rds"))
st_write(BirdLife, paste0(filedir, "SpeciesData_climateNiche/BirdLife.shp"), append=F)

```

# Species Niches via PCA

```{r}

climate_stack_agg <- readRDS(paste0(out_path, "climate_stack_agg.rds"))
range(climate_stack_agg)
pca_res <- prcomp(climate_stack_agg, scale. = T)
summary(pca_res)


# Rasterize species range polygons  ======================================================
# r_birds <- rasterizeRange(dsn=paste0(out_path, "SpeciesData_climateNiche/BirdLife.shp"),
#                           id="sci_nam", touches=TRUE, save = TRUE, 
#                           path = paste0(out_path, "SpeciesData_climateNiche/sp_rasters/"))

sp_v <- stringr::str_split(list.files(paste0(out_path, "sp_rasters/")), pattern = "_0.5.tif")
sp_v <- do.call(rbind, sp_v)[,1] 

## Read bird shapefiles back in ===========================================================

r_birds <- rast(paste0(out_path, "SpeciesData_climateNiche/sp_rasters/", 
                       list.files(paste0(out_path, "SpeciesData_climateNiche/sp_rasters/"), 
                                  pattern =".tif")))
names(r_birds) <- sp_v

# Extract species coordinates ===========================================================
try({
coords_sp <- list()
for(i in seq_along(sp_v)){
  r_b <- r_birds[[i]]

  # Match resolution, extent, and projection of climate raster to species raster
  r_b_matched <- project(r_b, climate_stack_agg,  method = "average")
  
  r_b2 <- as.data.frame(r_b_matched, xy=T)
  r_b2$species <- sp_v[i]
  r_b3 <- r_b2 %>% rename("Presence" = sp_v[i])
  coords_sp[[i]] <- r_b3
}
})

coords_df <- do.call(rbind,coords_sp)


# Loop through species to extract climate values  ======================================
sp_v <- unique(coords_df$species)
clim_vals_list <- list()
pca_all <- list()
for (i in seq_along(sp_v)){
  
  sp <- coords_df %>% filter(species == sp_v[i]) %>% select(-species, -Presence)
  clim_vals <- extract(climate_stack_agg, sp, xy=T, df=T) %>% data.frame()
  clim_vals$species = sp_v[i]
  clim_vals_list[[i]] <- clim_vals
  
  # PCA predictions:  ===========================================================
  sp_pca <- predict(pca_res, clim_vals[,2:14])[,1:2] %>% data.frame() %>% mutate(species = sp_v[i])

  pca_all[[i]] <- sp_pca
  
}


clim_vals_all <- do.call(rbind, clim_vals_list) 

# Checking NAs #
clim_vals_all %>% filter_all(any_vars(!is.na(.))) %>% distinct(species) %>% nrow() # non-NAs for 736 species
clim_vals_all %>% filter_all(any_vars(is.na(.))) %>% distinct(species) %>% nrow() # NAs for 88 species

# Save Objects #
saveRDS(clim_vals_all, paste0(out_path, "species_climate_df.rds"))
saveRDS(pca_all, paste0(out_path, "pca_all.rds"))

# Plot Climate Space for a couple of species # 
library(ggplot2); library(ggfortify)
ggplot()+
  geom_point(aes(x=PC1, y=PC2), col = "black", data= pca_res)+
    geom_point(aes(x=PC1, y=PC2), col = "blue", alpha = 0.2, data = pca_all[[1]])+
    geom_point(aes(x=PC1, y=PC2), col = "red", alpha = 0.2, data = pca_all[[2]])+
    geom_point(aes(x=PC1, y=PC2), col = "green", alpha = 0.1, data = pca_all[[3]])+
    geom_point(aes(x=PC1, y=PC2), col = "yellow", alpha = 0.1, data = pca_all[[4]])+
    geom_point(aes(x=PC1, y=PC2), col = "purple", alpha = 0.1, data = pca_all[[5]])
  

```

### Extract Niche Breadths (PC1, PC2) per species

```{r}


pca_all <-  readRDS(paste0(out_path, "pca_all.rds")) # Predicted values in PCA for species
all_niches <- list()
# Calculate niche breadth
for (i in seq_along(pca_all)){
  niche_breadth1 <- apply(pca_all[[i]][,1:2], 2, var, na.rm=T) 
  niche_breadth2 <- apply(pca_all[[i]][,1:2], 2, sd, na.rm=T) 
  # Create a data frame with species and corresponding variance and standard deviation
  niche_breadth <- data.frame(
    species = unique(pca_all[[i]]$species),
    var_PC1 = niche_breadth1[1],
    var_PC2 = niche_breadth1[2],
    sd_PC1 = niche_breadth2[1],
    sd_PC2 = niche_breadth2[2])
  all_niches[[i]] <- niche_breadth
}


 Niches_df<-  plyr::rbind.fill(all_niches)[,1:5]%>% rename("verbatim_name" = "species") 

Niches_df$verbatim_name = gsub("_", " ",Niches_df$verbatim_name)
saveRDS(Niches_df, paste0(out_path, "Niches_df.rds"))

ggplot()+
  geom_point(data = Niches_df, aes(x = sd_PC1, y = sd_PC2, col = verbatim_name), show.legend = F) 
 
```
