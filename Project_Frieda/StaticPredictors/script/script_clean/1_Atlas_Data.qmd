---
title: "Atlas Data Clean"
author: "Friederike WÃ¶lke"
date: "2024-04-20"
output:
  html_document:
    code_folding: hide
format:
  html:
    toc: true
    number-sections: true
    colorlinks: true
---

# Clean Environment
```{r, message = F}
rm(list=ls())
gc()
```

# Libraries
```{r, mesaage = F}
# Spatial:
library(sf) 
sf_use_s2(FALSE) # switch spherical geometry off

# Data handling:
library(rstatix)
library(dplyr) 
library(tidyr) 
# library(plyr) 
## plyr is required but produces some issues with dplyr. Thus it will be called in each function individually and is not required to load here.

```

# Path Variables:
```{r}
# Folders
source_atlas <- c("c:/Users/wolke/OneDrive - CZU v Praze/Datasets/Processed/Atlases/Replicated/")
source_predictors <- c("c:/Users/wolke/OneDrive - CZU v Praze/Dokumenty/PhD_Projects/StaticPredictors/Data/")
source_Git <- c("c:/Users/wolke/OneDrive - CZU v Praze/Dokumenty/GitHub/BEAST_General_Procedures/Project_Frieda/StaticPredictors/")

# Folder paths to atlas data
source_paths <- c(paste0(source_atlas, "Birds_Atlas_Czechia/"), 
                  paste0(source_atlas, "Birds_Atlas_New_York/"), 
                  paste0(source_atlas, "Birds_atlas_Japan/"), 
                  paste0(source_atlas, "Birds_atlas_EBBA/"))

# Folder path to output folder
out_path <- c(paste0(source_Git, "out/"))

# Paths to data & grids
data_paths <- c(paste0(source_paths[1],"Birds_Atlas_Czechia_beast_data.rds"), 
                paste0(source_paths[2], "Birds_Atlas_New_York_beast_data.rds"), 
                paste0(source_paths[3], "Birds_atlas_Japan_beast_data.rds"),
                paste0(source_paths[4], "2Birds_atlas_EBBA_beast_data.rds"))

grid_paths <- c(paste0(source_paths[1],"Birds_Atlas_Czechia_grid.gpkg"), 
                paste0(source_paths[2], "Birds_Atlas_New_York_grid.gpkg"), 
                paste0(source_paths[3], "Birds_atlas_Japan_grid.gpkg"),
                paste0(source_paths[4], "Birds_atlas_EBBA_grid.gpkg"))

```

# Set Variables
```{r}
# Vectors for loops:
atlas_names <- c("Birds_Atlas_Czechia", "Birds_Atlas_New_York","Birds_atlas_Japan", "Birds_atlas_EBBA")
time_periods <- c(1,2)

# Define the desired order of factor levels
desired_levels <- factor(c("1", "2","4", "8", "16", "32", "64", "128"), ordered = T,  
                         levels = c("1", "2","4", "8", "16", "32", "64", "128")) 

# list of crs in order of atlas_names
crs_list <- list( "EPSG:5514", # CZ
                  "EPSG:32118", # NY
                  "EPSG:6668", # JP
                  "EPSG:3035") # EU
names(crs_list) <- c("CZ", "NY", "JP", "EU")

```

# Data
## Read & Pre-Process

```{r}
# Species data  =====================
presence_data <- list()
for (i in seq_along(data_paths)){
  pres_dat <- readRDS(data_paths[i])
  sy <- sort(unique(pres_dat$start_year))
  
  pres_dat2 <- pres_dat %>%     
    ungroup() %>%
    # Add time-period column
    mutate(tp = case_when(start_year == sy[1] ~ 1, 
                          start_year == sy[2] ~ 2)) %>% 
    filter(tp %in% c(1,2)) %>%
    # Reorder spatial scales from small to large
    reorder_levels(cell_grouping, order=desired_levels) %>% 
    select(dataset, tp, cell_grouping, 
           cell_label, cell_lat, cell_long, area, 
           verbatim_name) 
  presence_data[[i]] <- pres_dat2
}

# Merge list of atlases together
presence_data2 <- plyr::rbind.fill(presence_data, fill=T) %>% 
  distinct(dataset, tp, verbatim_name, cell_grouping, cell_label, .keep_all = T)

```

### Data checks

```{r}
# ========================== Data checks ======================================= #

colSums(is.na(presence_data2))

# Summary sp and site numbers: Before reduction
presence_data2 %>% 
  filter(cell_grouping == 1) %>% 
  group_by(dataset, tp) %>% 
  summarise(n_sp = n_distinct(verbatim_name),
            n_sites = n_distinct(cell_label))

presence_data2 %>% 
  ungroup() %>% 
  summarise(n_sp = n_distinct(verbatim_name)) # 989 sp in total (before reduction)

# ==================== Save output & clean up environment ===================== #

# saveRDS(presence_data2, paste0(out_path, "rds/presence_data_raw.rds"))
rm(pres_dat, sy, pres_dat2)

# ============================================================================= #
```

## Filter 1: Cells sampled twice
- remove cells (from the species data) that were only sampled once 
  (Note: this is not identical to cells that have never been sampled. Those are generally excluded here)
- remove species that were only sampled once in the cells that were sampled twice (because we don't have change data for them anyway).

```{r}
## Filter level 1: Cells sampled twice 
common_cells <- presence_data2 %>% 
  ungroup() %>% 
  distinct(dataset, cell_grouping, cell_label, tp) %>% ungroup() %>%
  group_by(dataset, cell_grouping, cell_label) %>%
  # How often each cell was sampled:
  mutate(num_periods_cells = n_distinct(tp)) %>% 
  # Dummy variable for easy filtering of cells that were sampled repeatedly
  mutate(repeated = case_when(
    num_periods_cells == 2 ~ 1, 
    num_periods_cells %in% c(1,2) ~ 0)) %>% 
  ungroup() %>% 
  group_by(dataset) %>% 
  select(dataset, cell_grouping, cell_label, num_periods_cells, repeated) %>% 
  distinct()

presence_data_rep <- full_join(presence_data2, common_cells)

excluded_cells <- common_cells %>% 
  filter(num_periods_cells == 1) %>% 
  distinct(dataset, cell_grouping, cell_label)


```

### Data checks
```{r}
# ========================== Data checks ======================================= #
common_cells %>% 
  filter(num_periods_cells == 2 & cell_grouping == 1) %>%
  group_by(dataset, cell_grouping) %>% 
  summarise(n = n_distinct(cell_label))

table(excluded_cells$dataset) # EBBA: 66 (1706?), JP: 3, NY = 20
# ============================================================================= #
```

## Filter 2: Species sampled twice in those cells
```{r}
## Filter level 2: Species sampled twice in the remaining cells
common_sp <- presence_data_rep %>% filter(repeated == 1 & cell_grouping == 1) %>% 
    group_by(dataset, verbatim_name) %>%
    summarise(num_periods_sp = n_distinct(tp)) %>% 
  ungroup() %>% group_by(dataset, num_periods_sp)

excluded_sp <- common_sp %>% 
  filter(num_periods_sp == 1) %>% 
  distinct(dataset, verbatim_name)
```

### Data checks
```{r}
# ========================== Data checks ======================================= #
common_sp %>% 
  filter(num_periods_sp == 2) %>%
  group_by(dataset) %>% 
  summarise(n = n_distinct(verbatim_name))

table(excluded_sp$dataset)
excluded_sp %>% write.csv("../../Documents/documentation_methods/ExcludedSpecies.csv") # CZ: 19, EBBA = 14 (94?), JP = 32, NY = 16
# ============================================================================= #
```

## Add: Diversity Metrics per Area

```{r}
# Add Diversity Metris to data: 
presence_data_filt <- full_join(presence_data_rep, common_sp)  %>%  
    filter(num_periods_cells == 2 & num_periods_sp == 2 & repeated == 1) %>% 
    select(-num_periods_cells, -num_periods_sp, -repeated)

# Subset with only repeated cells
presence_data_filt2 <- presence_data_filt %>% 
    group_by(dataset, tp, cell_grouping) %>% # Gamma is per atlas
    mutate(Gamma = n_distinct(verbatim_name)) %>% 
    ungroup() %>% 
    # Alpha and Beta are per cell
    group_by(dataset, tp, cell_grouping, cell_label) %>% 
    mutate(Alpha = mean(n_distinct(verbatim_name))) %>% 
    mutate(Beta = Gamma / Alpha) %>%
    ungroup() %>% 
    # Mean Beta and Mean Alpha are per atlas
    group_by(dataset, tp, cell_grouping) %>%  
    mutate(Mean_Alpha = mean(Alpha),
           Mean_Beta = Gamma / Mean_Alpha) %>% 
    ungroup()
```

### Data checks

```{r}
# ========================== Data checks ======================================= #
presence_data_filt %>% 
  filter(cell_grouping == 1) %>%
  group_by(dataset, tp) %>% 
  rstatix::get_summary_stats(type = "robust")

presence_data_filt %>% 
  filter(cell_grouping == 1) %>%
  group_by(dataset, tp) %>% 
  summarize(
    n_sp = n_distinct(verbatim_name),
    n_cells = n_distinct(cell_label))


presence_data_filt %>% distinct(verbatim_name) # 841 species 

# ==================== Save output & clean up environment ===================== #  
# saveRDS(presence_data_filt, "Presence_data_filtered.rds") ## this is the most up to date name for this file !!
# saveRDS(presence_data_filt, paste0(out_path, "rds/presence_data_reduced.rds"))
rm(common_sp, presence_data_rep, presence_data2, excluded_cells, excluded_sp, presence_data, i )
```

# Grids
## Read & Pre-Process
- Transform to national CRS with unit = meter
```{r}
# make list with names of layers so we can read them in below
layers_list <- list()
for (i in seq_along(grid_paths)){
  layers <- st_layers(grid_paths[i])$name
  layers_list[[i]] <- layers
  }
names(layers_list) <- atlas_names

# read grids to list
grid_list <- list()
for (a in seq_along(grid_paths)) {
    grids <- sapply(layers_list[[a]], function(i) {
      st_read(grid_paths[[a]], paste(i), quiet = TRUE) %>% 
        st_transform(crs = crs_list[[a]]) %>% 
        reorder_levels( cell_grouping, order=desired_levels)
      }, simplify = FALSE)
    grid_list[[a]] <- grids
    }

# clear space
rm(a, i, layers, layers_list, grids)
```

### Mapping replicated cells

```{r}
# pdf(file = "out/figures/CellsSampledMaps.pdf", onefile = T, paper = "a4")
for (a in seq_along(grid_list)){
  for (scale in seq_along(length(grid_list[[a]]))){
  t_common_cells <- common_cells %>% 
    filter(dataset == atlas_names[[a]] & cell_grouping == scale) %>% 
    mutate(repeated = as.factor(repeated))
  t_grid <- grid_list[[a]][[scale]]
  t_grid2 <- full_join(t_grid, t_common_cells) %>% 
    mutate(repeated = case_when(is.na(repeated) ~ "never",
                                repeated == 1 ~ "both",
                                repeated == 0 ~ "once")) %>% 
    mutate(repeated = as.factor(repeated)) %>% 
    reorder_levels(repeated, order = c("never", "once", "both"))
  plot(t_grid2["repeated"], pal = hcl.colors(3, hcl.pals(type = "divergingx")[13], alpha = 0.7))
  #tmap::qtm(t_grid2, "repeated", style = "col_blind", fill = c("black"))
  print(t_grid2 %>% 
    filter(repeated == "both" & cell_grouping == 1) %>% 
    mutate(Total_area_sampled = sum(area)) %>% 
    distinct(Total_area_sampled))
  }
}

# dev.off()

rm(t_common_cells, t_grid, t_grid2, common_cells, a, scale)
```

```{r}
presence_data_filt2 ## Plot something
rm(presence_data_filt2)
```

# Save Objects to RDS
```{r}

save.image("1_Atlas_Data_clean.RData")
## We need these:
#atlas_names
#time_periods
#grid_list
#presence_data_filt # I have to filter this completely ! ## TO DO
load("1_Atlas_Data_clean.RData")
```