---
title: "Atlas Data Clean"
author: "Friederike WÃ¶lke"
date: "2024-04-20"
output:
  html_document:
    code_folding: hide
format:
  html:
    toc: true
    number-sections: true
    colorlinks: true
---

# Change Maps for each Atlas

-   we will use the raw data

-   we will use the highest resolution

## Libraries

```{r}
rm(list=ls())
library(sf);  sf_use_s2(FALSE)
library(dplyr);
library(rstatix);
library(ggplot2);
library(rnaturalearth)
gc()

```

## Data

```{r}

## Species x geom merge:
dat <- readRDS("../../out/rds/presence_sf_list.rds")
trends <- read.csv("../../Documents/documentation_methods/Trends.csv") %>% select(-X)

## raw grids:
# folder path to atlas data
source_atlas <- c("c:/Users/wolke/OneDrive - CZU v Praze/Datasets/Processed/Atlases/Replicated/")
source_paths <- c(paste0(source_atlas, "Birds_Atlas_Czechia/"), 
                  paste0(source_atlas, "Birds_Atlas_New_York/"), 
                  paste0(source_atlas, "Birds_atlas_Japan/"), 
                  paste0(source_atlas, "Birds_atlas_EBBA/"))
grid_paths <- c(paste0(source_paths[1],"Birds_Atlas_Czechia_grid.gpkg"), 
                paste0(source_paths[2], "Birds_Atlas_New_York_grid.gpkg"), 
                paste0(source_paths[3], "Birds_atlas_Japan_grid.gpkg"),
                paste0(source_paths[4], "Birds_atlas_EBBA_grid.gpkg"))
desired_levels <- factor(c("1", "2","4", "8", "16", "32", "64", "128"), ordered = T,  
                         levels = c("1", "2","4", "8", "16", "32", "64", "128")) 

grids <- list()
for (a in seq_along(grid_paths)) {
    grids_a <-sapply("cell1grid", function(i) {
      st_read(grid_paths[[a]], paste(i), quiet = TRUE) %>% 
        reorder_levels( cell_grouping, order=desired_levels)
      }, simplify = FALSE)
    grids[[a]] <- grids_a$cell1grid
}

names(grids) <- c("Birds_Atlas_Czechia", "Birds_Atlas_New_York", "Birds_atlas_Japan", "Birds_atlas_EBBA")


```

### Data: Country borders

```{r}
## Save individual grids for plotting =====
grid_CZ <- grids[[1]]  %>% st_make_valid()
grid_NY <- grids[[2]]  %>% st_make_valid()
grid_JP <- grids[[3]]  %>% st_make_valid()
grid_EU <- grids[[4]]  %>% st_make_valid()

# Create a buffer around the bounding box
bbox_EU <- st_bbox(grid_EU)
buffered_bbox <- st_buffer(grid_EU, dist = 15)


## Get the Borders for plotting =====
EU <- ne_countries(continent = "europe", scale = 10, returnclass='sf') %>% st_crop(buffered_bbox)
TK <- ne_countries(country = "turkey", scale = 10, returnclass='sf')

EU2 <- rbind(EU, TK)
plot(EU2[,"sovereignt"])

CZ <- ne_countries(country = "czechia", scale = 10,  returnclass='sf') %>% st_crop(st_bbox(grid_CZ))

JP <- ne_countries(country = "japan", scale = 10, returnclass='sf') %>% st_crop(st_bbox(grid_JP))
# Load world map data
USA <- ne_states(returnclass = "sf", country = 'United States of America') 
NY <- USA[USA$name == "New York", ]
NY <- NY  %>% st_crop(st_bbox(grid_NY)) 


## List with country borders:
countries_list <- list(CZ, NY, JP, EU2)
names(countries_list) <- names(dat)

```

### Data: make change data (similar to EBBA2 change)

```{r}
# For each species we create list of unique cell_labels and if they intersect they get a "stable", if they differ,they either get "colonized" or "extinct".
change_list_atlas <- list()
change_list_sp<- list()

for (a in seq_along(dat)){
  
  # subset for one atlas
  atlas1 <- dat[[a]] %>% 
    # only use the good cells:
    filter(num_periods_sp == 2 & num_periods_cells == 2) %>% 
    # reduce columns:
    select(cell_label, dataset, cell_lat, cell_long, verbatim_name, geom, tp)
  
  # species list for one atlas to loop through
  sp_list <- unique(atlas1$verbatim_name) %>% na.omit()
  
  for (sp in seq_along(sp_list)){
    # subset for one species
    atlas1sp <- atlas1 %>% filter(verbatim_name == sp_list[sp]) 
    
    # cells sampled in tp 1
    cells1 <- atlas1sp %>% filter(tp == 1) %>% pull(cell_label) %>% unique()
    
    # cells sampled in tp 2
    cells2 <- atlas1sp %>% filter(tp == 2) %>% pull(cell_label) %>% unique()
    
    # classify cells by: stable, colonized, extinct 
    stable <- intersect(cells1, cells2)
    colonized <- setdiff(cells2, cells1) 
    extinct <- setdiff(cells1, cells2)
    
    # make new data with merged TP with change column:
    change <- atlas1sp %>% 
      select(-tp) %>% 
      unique() %>%
      group_by(cell_label) %>%
      mutate(Change = factor(case_when(
      cell_label %in% stable ~ "stable",
      cell_label %in% colonized ~ "colonized",
      cell_label %in% extinct ~ "extinct",
      .default = NA
    ))) %>% ungroup()
    
    change_list_sp[[sp]] <- change
    
  }
  
  change_df_sp <- do.call(rbind, change_list_sp)
  change_list_atlas[[a]] <- change_df_sp
  
}

## Merge atlas list to dataframe
change_sf <- do.call(rbind, change_list_atlas)

# merge change with trends data
change_sf2 <- left_join(change_sf, trends)

## save RDS
saveRDS(change_sf2, "../../out/rds/ChangeDataSf.rds")


# save list of species and datasets 
sp_list <- trends %>% distinct(dataset, verbatim_name)

```

## Mean trend per cell for summary maps
```{r}

Change_per_cell <- change_sf2 %>% 
  group_by(dataset, cell_label) %>%
  mutate(Change_num = case_when(
    Change == "stable" ~ 0,
    Change == "extinct" ~ -1,
    Change == "colonized" ~ 1,
    .default = NA)) %>% 
  mutate(cell_mean_change = mean(Change_num)) %>% 
  select(dataset, cell_label, cell_mean_change) %>% 
  unique()

Map_CZ <- ggplot(Change_per_cell %>% filter(dataset == "Birds_Atlas_Czechia"),
  aes(fill = cell_mean_change)) +
  geom_sf(data = grids[[1]], col = "grey", fill = "lightgrey" )+
  geom_sf(size = 1.2) +
   geom_sf(data = countries_list[[1]],  col = "black", fill = NA)+
  scale_fill_distiller(palette = "PuOr", direction = 1,  limits = c(-1, 1)) +
  theme_void() 

Map_NY <- ggplot(Change_per_cell %>% filter(dataset == "Birds_Atlas_New_York"),
  aes(fill = cell_mean_change)) +
  geom_sf(data = grids[[2]], col = "grey", fill = "lightgrey" )+
  geom_sf(size = 1.2) +
  geom_sf(data = countries_list[[2]],  col = "black", fill = NA)+
  scale_fill_distiller(palette = "PuOr", direction = 1,  limits = c(-1, 1)) +
  theme_void() 

Map_JP <- ggplot(Change_per_cell %>% filter(dataset == "Birds_atlas_Japan"),
  aes(fill = cell_mean_change)) +
  geom_sf(data = grids[[3]], col = "grey", fill = "lightgrey" )+
  geom_sf(size = 1.2) +
  geom_sf(data = countries_list[[3]],  col = "black", fill = NA)+
  scale_fill_distiller(palette = "PuOr", direction = 1,  limits = c(-1, 1)) +
  theme_void() 

Map_EU <- ggplot(Change_per_cell %>% filter(dataset == "Birds_atlas_EBBA"),
  aes(fill = cell_mean_change)) +
  geom_sf(data = grids[[4]], col = "grey", fill = "lightgrey" )+
  geom_sf(size = 1.2) +
  geom_sf(data = countries_list[[4]],  col = "black", fill = NA)+
  scale_fill_distiller(palette = "PuOr", direction = 1,  limits = c(-1, 1)) +
  theme_void()

gridExtra::grid.arrange(Map_CZ, Map_EU, Map_JP, Map_NY)


## Interactive maps: (saved per hand to figures folder)
mapview::mapview(Change_per_cell %>% 
                   filter(dataset == "Birds_Atlas_Czechia") %>% 
                   select(cell_mean_change), col.regions=RColorBrewer::brewer.pal(11, "PuOr"), legend = F )

mapview::mapview(Change_per_cell %>% 
                   filter(dataset == "Birds_Atlas_New_York") %>% 
                   select(cell_mean_change), col.regions=RColorBrewer::brewer.pal(11, "PuOr"), legend = F )


mapview::mapview(Change_per_cell %>% 
                   filter(dataset == "Birds_atlas_Japan") %>% 
                   select(cell_mean_change), col.regions=RColorBrewer::brewer.pal(11, "PuOr"), legend = F )

mapview::mapview(Change_per_cell %>% 
                   filter(dataset == "Birds_atlas_EBBA") %>% 
                   select(cell_mean_change), col.regions=RColorBrewer::brewer.pal(11, "PuOr"), legend = F )





```



## Extreme Species
```{r}

extreme_sp <- change_sf2 %>% 
  filter(trend %in% c("strong decrease (> halfing)", "strong increase (> doubling)")) %>% 
  select(dataset, verbatim_name, trend) 

# 
extreme_sp %>% 
  st_drop_geometry()  %>% 
  group_by(dataset, trend) %>% 
  summarise(n_sp = n_distinct(verbatim_name))


sp_list <- extreme_sp %>% st_drop_geometry() %>% distinct(dataset, verbatim_name, trend)

```



## Save maps of all extreme species

### Example plot: Change
```{r}
row_id <- 2

## Quick example plot (looks great!)
exPlot <- ggplot() +
  geom_sf(data = grids[[sp_list[[row_id,1]]]], col = "grey", fill = "lightgrey" )+
  geom_sf(data = change_sf2 %>% filter(verbatim_name == sp_list[[row_id,2]] & dataset == sp_list[[row_id,1]]),  
          aes(fill = Change), size = 1.2) +
   geom_sf(data = countries_list[[sp_list[[row_id,1]]]],  col = "black", fill = NA)+
  scale_fill_manual(
    values = c(stable = "#f7f7f7",
    colonized = "#998ec3",
    extinct = "#f1a340")) +
  theme_void()+
  labs(title = paste(sp_list[[row_id,2]], "-", sp_list[[row_id,1]], "*", change_sf2 %>% filter(verbatim_name == sp_list[[row_id,2]] & dataset == sp_list[[row_id,1]])%>% pull(trend) %>% unique(), "*"))

exPlot
```

### Save them all
```{r}
p_list <- list()
for (i in seq(1:nrow(sp_list))){
  row_id <- i
  
  p_list[[i]] <- print(
  ggplot() +
    geom_sf(data = grids[[sp_list[[row_id,1]]]], col = "grey", fill = "lightgrey")+
    geom_sf(data = change_sf2 %>% filter(verbatim_name == sp_list[[row_id,2]] & dataset == sp_list[[row_id,1]]),  
          aes(fill = Change), size = 1.2) +
    geom_sf(data = countries_list[[sp_list[[row_id,1]]]],  col = "black", fill = NA)+
    scale_fill_manual(
      values = c(stable = "#f7f7f7",
      colonized = "#998ec3",
      extinct = "#f1a340")) +
    theme_void()+
    labs(title = paste(sp_list[[row_id,2]], "-", 
                     sp_list[[row_id,1]], 
                     "*", sp_list[[row_id, 3]], "*"))
  )
  
}

# esquisse:::ggplot_to_ppt()

```

