---
title: "EU change_ Spatial autocorrelation v3"
format: html
---


```{r}
pacman::p_load("ncf", "dplyr", "rstatix", "sf")
sf_use_s2(FALSE)

EBBA_df <- readRDS("out/rds/EBBA_df_all.rds") %>% filter(!is.na(cell_label)) # only cell_grouping == 1
colSums(is.na(EBBA_df))
time_periods <- c(1,2)
atlas_names <- c("Birds_atlas_EBBA")
morans_list <- list()
data_list <- list()
morans_list2 <- list()
data_list2 <- list()

for (y in seq_along(time_periods)){
    dd <- EBBA_df %>% 
        filter(tp == time_periods[y]) %>% 
        ungroup() %>% 
        distinct()
    sp_list <- unique(dd$verbatim_name)

    for (s in seq_along(sp_list)){
        print(paste("atlas =", unique(dd$dataset), "tp =", unique(dd$tp), "sp = ", sp_list[s], "N = ", s, "/", length(sp_list)))

        # Presence-Absence df (dummy: 1, 0)
        data_species <- dd %>% 
            distinct(verbatim_name, cell_label, cell_lat, cell_long) %>% 
            ungroup() %>% 
            distinct() %>%
            mutate(
                verbatim_name = ifelse(verbatim_name != sp_list[s], NA, verbatim_name)) %>%
            group_by(across(-verbatim_name)) %>%
            slice(which.max(!is.na(verbatim_name))) %>% 
            distinct(verbatim_name, cell_label, .keep_all=T) %>%
            mutate(
                presence = ifelse(!is.na(verbatim_name), 1, 0)) %>% 
            ungroup()

         data_reduced <- dd %>% 
            filter(verbatim_name == sp_list[s]) %>% 
            select(verbatim_name, dataset, tp, area, area_cropped) %>% 
            distinct() %>% 
            mutate(mean_area = mean(area),
                mean_area_cropped = mean(area_cropped),
                mean_cell_length = sqrt(mean_area)) %>% 
            mutate(
                increment2 = mean_cell_length * 1.75) %>% 
            ungroup() %>% 
            distinct(verbatim_name, .keep_all = T)
        data_species$increment <- data_reduced$increment2

        # Calculate Morans correlogram with ncf package
        tryCatch({
            print("Attempting to calculate Moran's I")
            morans_cor <- correlog(x = data_species$cell_long, 
                         y = data_species$cell_lat, 
                         z = data_species$presence, 
                         latlon = TRUE, 
                         increment = unique(data_species$increment), 
                         resamp = 0)
  
        data_reduced$moran <- morans_cor$correlation[1]
        data_reduced$x_intercept <- morans_cor$x.intercept
        data_reduced$dist_at_moran <- morans_cor$mean.of.class[1]
  
        print("Moran's I calculated successfully")
        }, 
        error = function(e) {
          print("Error occurred while calculating Moran's I")
          print(paste("Error message:", e))
          morans_cor <- NA
          data_reduced$moran <- NA
          data_reduced$x_intercept <- NA
          data_reduced$dist_at_moran <- NA
          })

        data_list[[s]] <- data_reduced
        morans_list[[s]] <- morans_cor
        }
        
        morans_list2[[y]] <- morans_list
        data_df <- plyr::rbind.fill(data_list)
        data_list2[[y]] <- data_df

}

data_df_EU <- plyr::rbind.fill(data_list2) 
saveRDS(data_df_EU, "out/rds/SAC_EU_v3.rds")
saveRDS(morans_list2, "out/rds/morans_list_EU_v3.rds" )


```