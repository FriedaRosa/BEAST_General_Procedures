---
title: "SAC"
format: html
editor: visual
---

.

```{r}
source_Git <- c("c:/Users/wolke/OneDrive - CZU v Praze/Dokumenty/GitHub/BEAST_General_Procedures/Project_Frieda/StaticPredictors/")
out_path <- c(paste0(source_Git, "out/"))

pacman::p_load("ncf", "dplyr", "rstatix", "sf")
sf_use_s2(FALSE)
presence_data_all <- readRDS(paste0(out_path, "rds/presence_data_all.rds"))



time_periods <- c(1)
atlas_names <- c("Birds_Atlas_EBBA")

morans_list <- list()
data_list <- list()

morans_list2 <- list()
data_list2 <- list()


dd <- presence_data_all[[4]] %>% 
  ungroup() %>% 
  filter(cell_grouping == 1) %>% 
  select(dataset, tp, verbatim_name, area, area_cropped, cell_lat, cell_long, cell_label)
     
dd1 <- dd %>% filter(tp == 1) %>% ungroup() %>% distinct() 
sp_list <- unique(dd1$verbatim_name)
    
for (s in seq_along(sp_list)){  
print(paste("atlas =", unique(dd1$dataset), "tp =", unique(dd1$tp), "sp = ", sp_list[s], "N = ", s, "/", length(sp_list)))
      
      # Obtain a df for each species that indicates the presence (1) or absence (0) of the species
      
data_species <- dd1 %>% 
        distinct(verbatim_name, cell_label, cell_lat, cell_long) %>% 
        ungroup() %>% unique() %>%
        mutate(
          verbatim_name = ifelse(verbatim_name != sp_list[s], NA, verbatim_name)) %>%
        group_by(across(-verbatim_name)) %>%
        slice(which.max(!is.na(verbatim_name))) %>% 
        distinct(verbatim_name, cell_label, .keep_all=T) %>%
        mutate(
          presence = ifelse(!is.na(verbatim_name), 1, 0)) %>% ungroup()
    

data_reduced <- dd1 %>% 
        filter(verbatim_name == sp_list[s]) %>% 
        select(verbatim_name, dataset, tp, area, area_cropped) %>% 
        distinct() %>% 
        mutate(mean_area = mean(area),
          mean_area_cropped = mean(area_cropped),
          mean_cell_length = sqrt(mean_area)) %>% 
        mutate(
          increment2 = mean_cell_length * 1.75) %>% 
        ungroup() %>% 
        distinct(verbatim_name, .keep_all = T)
      
data_species$increment <- data_reduced$increment2
          
        
      tryCatch({
        print("Attempting to calculate Moran's I")
        morans_cor <- correlog(x = data_species$cell_long, 
                         y = data_species$cell_lat, 
                         z = data_species$presence, 
                         latlon = TRUE, 
                         increment = unique(data_species$increment), 
                         resamp = 0)
  
        data_reduced$moran <- morans_cor$correlation[1]
        data_reduced$x_intercept <- morans_cor$x.intercept
  
        print("Moran's I calculated successfully")
        }, 
        error = function(e) {
          print("Error occurred while calculating Moran's I")
          print(paste("Error message:", e))
          morans_cor <- NA
          data_reduced$moran <- NA
          data_reduced$x_intercept <- NA
          })
      
      data_list[[s]] <- data_reduced
      morans_list[[s]] <- morans_cor 
      

    } # species loop closing
    
    morans_list2[[y]] <- morans_list
    
    data_df <- plyr::rbind.fill(data_list)
    data_list2[[y]] <- data_df
  
  } # year loop closing

data_df2_EU <- plyr::rbind.fill(data_list2)
saveRDS(data_df2_EU, paste0(out_path, "rds/SAC_df_EU1.rds"))
saveRDS(morans_list2, paste0(out_path, "rds/morans_list_EU1.rds"))

```