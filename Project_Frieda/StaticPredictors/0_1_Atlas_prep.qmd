---
title: "Atlas Data Prep"
author: "Friederike WÃ¶lke"
format: html
editor: visual
---

## Libraries

```{r, message = F}

rm(list=ls())
library(sf)
library(dplyr)
library(AICcmodavg)
library(tidyr)
library(sparta)
library(ggplot2)
```

## Data Paths 

```{r}
#| warning: false
#| message: false
#| label: Variables

# folder path to atlas data
source_paths <- c("c:/Users/wolke/OneDrive - CZU v Praze/Datasets/Processed/Atlases/Replicated/Birds_Atlas_Czechia/", 
                  "c:/Users/wolke/OneDrive - CZU v Praze/Datasets/Processed/Atlases/Replicated/Birds_Atlas_New_York/" , 
                  "c:/Users/wolke/OneDrive - CZU v Praze/Datasets/Processed/Atlases/Replicated/Birds_atlas_Japan/", 
                   "c:/Users/wolke/OneDrive - CZU v Praze/Datasets/Processed/Atlases/Replicated/Birds_atlas_EBBA/")

# folder path to output folder
out_path <- "c:/Users/wolke/OneDrive - CZU v Praze/Dokumenty/GitHub/BEAST_General_Procedures/Project_Frieda/StaticPredictors/out/"

# create path to read in data and grids from variables
data_paths <- c(paste0(source_paths[1],"Birds_Atlas_Czechia_beast_data.rds"), 
                paste0(source_paths[2], "Birds_Atlas_New_York_beast_data.rds"), 
                paste0(source_paths[3], "Birds_atlas_Japan_beast_data.rds"),
                paste0(source_paths[4], "Birds_atlas_EBBA_beast_data.rds"))

grid_paths <- c(paste0(source_paths[1],"Birds_Atlas_Czechia_grid.gpkg"), 
                paste0(source_paths[2], "Birds_Atlas_New_York_grid.gpkg"), 
                paste0(source_paths[3], "Birds_atlas_Japan_grid.gpkg"),
                paste0(source_paths[4], "Birds_atlas_EBBA_grid.gpkg"))

layers_list <- list()
# save names of layers from file (needed to read them in):
for (i in seq_along(grid_paths)){
  layers <- st_layers(grid_paths[i])$name
  layers_list[[i]] <- layers
  
}

# Define the desired order of factor levels
# Define the desired order of factor levels
desired_levels <- factor(layers, 
                         ordered = T, 
                         levels = c("1", "2", 
                                    "4", "8", 
                                    "16", "32",
                                    "64", "128")) 


### 3. Reading the data


# Species data
# Species data
presence_data <- list()
for (i in seq_along(data_paths)){
  pres_dat <- readRDS(data_paths[i])
  presence_data[[i]] <- pres_dat
  
}
presence_data_df <- plyr::rbind.fill(presence_data, fill=T)
presence_data <- presence_data_df

atlas_names <- unique(presence_data$dataset)



## add column for time period (tp)


time_periods <- presence_data %>% group_by(dataset) %>% select(start_year, end_year) %>% distinct()
time_periods$tp <- c(1, 2, 3, 2, 1, 1, 2, 1, 2)

# 
# start_times <- sort(unique(presence_data$start_year))
# end_times <- sort(unique(presence_data$end_year))
# 
# time_periods <- data.frame(start_year = start_times,
#                            end_year = end_times, 
#                            tp = seq_along(end_times))

presence_data2 <- merge(presence_data, time_periods, 
                       by=c("dataset","start_year", "end_year"), 
                       all.x=T)
rm(presence_data, layers, presence_data_df, pres_dat) # clear space


# grid data
grid_list2 <- list()

for (a in seq_along(grid_paths)) {

    grid_list <- sapply(layers_list[[a]], function(i) {
  
      st_read(grid_paths[[a]], paste(i), quiet = TRUE)
      }, simplify = FALSE)

    
    grid_list2[[a]] <- grid_list
    
    }



rm(grid_list, a) # clear space

```

## Calculate occupancy

```{r}
#| label: AOO calculation across scales and species

occ_data_list <- list()
occ_data_list_all_Atlas <- list()
# We run the loop for each Atlas
for (j in seq_along(grid_list2)){ ## Atlas
  
  for (i in seq_along(grid_list2[[j]])){
    
    # subset the grid_list and work on a single spatial grain:
 
    map_atlas_1scale <- grid_list2[[j]][[i]] 

    
  # Calculate total sampled area per time period:
  

  map_atlas_1scale <- map_atlas_1scale %>% mutate(
    Total_area1 = sum(map_atlas_1scale$area1s),
    Total_area2 = sum(map_atlas_1scale$area2s))
  
  # Calculate total number of sampled cells per time period:
Total_Ncells1 <- map_atlas_1scale %>%
  filter(area1s > 0) %>%
  mutate(Total_Ncells1 = length(unique(cell_label))) %>%
  pull(Total_Ncells1) %>%
  unique()
Total_Ncells2 <- map_atlas_1scale %>%
  filter(area2s > 0) %>%
  mutate(Total_Ncells2 = length(unique(cell_label))) %>%
  pull(Total_Ncells2) %>%
  unique()

  
  Total_Ncells <- data.frame(
    cell_grouping = unique(map_atlas_1scale$cell_grouping),
    Total_Ncells1, Total_Ncells2)
  
  map_atlas_1scale <- merge(map_atlas_1scale, Total_Ncells)
  
  # map_atlas_1scale %>% 
  #   pivot_longer(cols=c('Total_Ncells1', 'Total_Ncells2', 'Total_Ncells3'),
  #                names_to='year',
  #                values_to='Total_N_cells')

  # subset the presence/absence data to the current spatial grain:
  pres_data_1atlas <- presence_data2 %>% 
    filter(dataset == atlas_names[j]) %>%
    filter(cell_grouping == unique(map_atlas_1scale$cell_grouping))

  # Merge sampled and unsampled cells for calculations:
  pres_data_full_1atlas <- merge(pres_data_1atlas, map_atlas_1scale, 
                          by = intersect(names(pres_data_1atlas), names(map_atlas_1scale)), 
                          all = T)
  pres_data_full_1atlas <- unique(pres_data_full_1atlas)

  # Reduce columns needed for analysis:
  pres_data_full_1atlas_reduced <- pres_data_full_1atlas %>% 
  ungroup() %>% 
    mutate(
      area_sampled = case_when(
        tp == 1 ~ area1s,
        tp == 2 ~ area2s,
        tp == 3 ~ NA),
      area_c = case_when(
        tp == 1 ~ area_cropped,
        tp == 2 ~ area_cropped,
        tp == 3 ~ NA),
      Total_area =case_when(
        tp == 1 ~ Total_area1,
        tp == 2 ~ Total_area2,
        tp == 3 ~ NA),
      Total_Ncells = case_when(
        tp == 1 ~ Total_Ncells1,
        tp == 2 ~ Total_Ncells2,
        tp == 3 ~ NA)) %>% 
    select(verbatim_name, tp, cell_grouping, cell_label,
           area_sampled, area_c, Total_area, Total_Ncells) %>%
    filter_all(any_vars(!is.na(.)))
  
## ========================================================================= ##
##  ========================== Calculate Occupancy ========================= ##
## ========================================================================= ##

occ_data <- pres_data_full_1atlas_reduced %>%
  ungroup() %>%   
  
# Remove unsampled cells:  
  filter(!is.na(verbatim_name)) %>%

# Necessary grouping to calculate occupancy:
  group_by(verbatim_name, tp, cell_grouping) %>% unique() %>%
  
# Calculate Occupancy:
  # mutate(occupancy_area = sum(area_sampled)) %>%
  mutate(occupancy_Ncells = n_distinct(cell_label)) %>%
  
# Calculate AOO:
  mutate(AOO = occupancy_Ncells * mean(area_sampled)) %>%
  
# Calculate relative Occupancy:
  # mutate(relative_occupancy_area = occupancy_area/Total_area) %>%
  mutate(relative_occupancy_Ncells = occupancy_Ncells/Total_Ncells) %>%
  
# Round values to 2 digits after the comma:
  # mutate(relative_occupancy_area = round(relative_occupancy_area, 3)) %>% 
  # mutate(relative_occupancy_Ncells = round(relative_occupancy_Ncells, 2)) %>% 

# Remove duplicated rows:
  distinct() 


occ_data$dataset <- atlas_names[j]


# save to list:
occ_data_list[[i]] <- occ_data



}

occ_data_full_df <- plyr::rbind.fill(occ_data_list, fill=T)
occ_data_list_all_Atlas[[j]] <- occ_data_full_df


}


occ_data_all_Atlas <- plyr::rbind.fill(occ_data_list_all_Atlas, fill=T)
occ_data_all_Atlas <- occ_data_all_Atlas %>% filter(tp != 3)


# create scale column as a fraction of the full country:
occ_data_Atlas_CZ <- occ_data_all_Atlas %>% 
  filter(dataset == atlas_names[1]) %>% 
  mutate(
      scale = case_when(
        cell_grouping == "1" ~ 1/64,
        cell_grouping == "2" ~ 1/32,
        cell_grouping == "4" ~ 1/16,
        cell_grouping == "8" ~ 1/8,
        cell_grouping == "16" ~ 1/4,
        cell_grouping == "32" ~ 1/2 ,
        cell_grouping == "64" ~ 1)) %>% distinct()


occ_data_Atlas_NY <- occ_data_all_Atlas %>% 
  filter(dataset == atlas_names[2]) %>% 
  mutate(
      scale = case_when(
        cell_grouping == "1" ~ 1/128,
        cell_grouping == "2" ~ 1/64,
        cell_grouping == "4" ~ 1/32,
        cell_grouping == "8" ~ 1/16,
        cell_grouping == "16" ~ 1/8,
        cell_grouping == "32" ~ 1/4,
        cell_grouping == "64" ~ 1/2 ,
        cell_grouping == "128" ~ 1)) %>% distinct()

occ_data_Atlas_JP <- occ_data_all_Atlas %>% 
  filter(dataset == atlas_names[3]) %>% 
  mutate(
      scale = case_when(
        cell_grouping == "1" ~ 1/128,
        cell_grouping == "2" ~ 1/64,
        cell_grouping == "4" ~ 1/32,
        cell_grouping == "8" ~ 1/16,
        cell_grouping == "16" ~ 1/8,
        cell_grouping == "32" ~ 1/4,
        cell_grouping == "64" ~ 1/2 ,
        cell_grouping == "128" ~ 1)) %>% distinct()

occ_data_Atlas_EBBA <- occ_data_all_Atlas %>% 
  filter(dataset == atlas_names[4]) %>% 
  mutate(
      scale = case_when(
        cell_grouping == "1" ~ 1/128,
        cell_grouping == "2" ~ 1/64,
        cell_grouping == "4" ~ 1/32,
        cell_grouping == "8" ~ 1/16,
        cell_grouping == "16" ~ 1/8,
        cell_grouping == "32" ~ 1/4,
        cell_grouping == "64" ~ 1/2 ,
        cell_grouping == "128" ~ 1)) %>% distinct()

# Merge back together
occ_data_Atlas_all <- merge(occ_data_Atlas_CZ, occ_data_Atlas_NY, 
                            by=intersect(names(occ_data_Atlas_CZ), names(occ_data_Atlas_NY)), all = T)

occ_data_Atlas_all2 <- merge(occ_data_Atlas_all, occ_data_Atlas_JP, 
                             by=intersect(names(occ_data_Atlas_all), names(occ_data_Atlas_JP)), all = T)

occ_data_Atlas_all3 <- merge(occ_data_Atlas_all2, occ_data_Atlas_EBBA, 
                             by=intersect(names(occ_data_Atlas_all2), names(occ_data_Atlas_EBBA)), all = T)

occ_data_Atlas_all3$dataset <- as.factor(occ_data_Atlas_all3$dataset)

table(occ_data_Atlas_all3$dataset)

occ_data_final <- occ_data_Atlas_all3


# save reduced version of this to file:

species_data <- occ_data_final %>% select(-c(cell_label, area_sampled, area_c)) %>% distinct(.) 
table(species_data$dataset)

species_data %>% filter(AOO == 0)
species_data <- species_data %>% filter(verbatim_name != 'Acridotheres tristis')

#species_data %>% write.csv(paste0(out_path, "Occupancy_table.csv"))

rm(occ_data_list, occ_data_list_all_Atlas, occ_data_full_df, occ_data_Atlas_CZ, occ_data_Atlas_NY, occ_data_Atlas_JP, occ_data_Atlas_EBBA, occ_data_Atlas_all, occ_data_Atlas_all2, occ_data_all_Atlas, pres_data_1atlas, pres_data_full_1atlas, pres_data_full_1atlas_reduced, Total_Ncells, Total_Ncells1, Total_Ncells2, j, i, map_atlas_1scale, occ_data_Atlas_all3, occ_data) # clear space
```

## Scale-Area Curves

```{r}

dd <- species_data %>%
  filter(relative_occupancy_Ncells < 1) %>% # exclude saturated scales
  unique() %>%
  filter_at(
    vars(c(
      cell_grouping, scale,
      AOO, occupancy_Ncells,
      relative_occupancy_Ncells
    )),
    any_vars(!is.na(.))
  )
## 

dd$dataset <- as.factor(dd$dataset)
tp1_dd <- dd %>% filter(tp == 1)
tp2_dd <- dd %>% filter(tp == 2)

tp_dd_list <- list(tp1_dd, tp2_dd)
rm(tp1_dd, tp2_dd)

# loop along tp_dd list, then along species

models_est_list <- list()
all_atlas_list <- list()
all_atlas_list_allyears <- list()
#all_AIC_tabs <- list()
#all_AIC_tabs_all <- list()


for (y in seq_along(tp_dd_list)){ # tp 1 and tp 2
  
  temp_df <- tp_dd_list[[y]]
  
  for (b in seq_along(levels(temp_df$dataset))){ # 4 different atlas datasets
     temp_df <- temp_df %>% filter(dataset == levels(temp_df$dataset)[b])
  
  
     for (i in seq_along(unique(temp_df$verbatim_name))){ # each species separately
    
       sp <- unique(temp_df$verbatim_name)[i]
       model_df <- temp_df %>% filter(verbatim_name == sp)
    
     
       m_lin <- lm(log(AOO) ~ log(scale), data = model_df)
      
      
      m_df1 <- data.frame(
      # row.names = c("linear"),      
      verbatim_name = sp,
      dataset = levels(temp_df$dataset)[b],
      tp = y, 
      m_AOO = m_lin$coefficients[2],
      b_AOO = m_lin$coefficients[1],
      r2_AOO = summary(m_lin)$r.squared)
      
      m_df1$D_AOO <- -2* m_df1$m_AOO+2
      m_df1$dataset <- as.factor(m_df1$dataset)
      

      models_est_list[[i]] <- m_df1 ## Model resolts for all Species of one atlas at one time period
      
     }
     models_est_list2 <- plyr::rbind.fill(models_est_list, fill = T)
     all_atlas_list[[b]] <- models_est_list2
     
  }
  all_atlas_list2 <- plyr::rbind.fill(all_atlas_list, fill = T)   
  all_atlas_list_allyears[[y]] <- all_atlas_list2


  
}


all_atlas_list_allyears2 <- plyr::rbind.fill(all_atlas_list_allyears, fill = T)
str(all_atlas_list_allyears2)

OAR_final <- all_atlas_list_allyears2

# rm(models_est_list, models_est_list2,all_atlas_list, all_atlas_list2, all_atlas_list_allyears, m_df1, model_df, sp, temp_df, dd, m_lin, y, b, i)
```

## Telfer Index of change (not static)

```{r}
species_data_new <- merge(species_data, 
                          OAR_final, 
                          by=c(intersect(names(species_data), names(OAR_final)))) %>% unique()

# Telfer:
CZ <- presence_data2 %>% filter(dataset == atlas_names[1] & tp %in% c(1,2)) %>% distinct()
NY <- presence_data2 %>% filter(dataset == atlas_names[2]) %>% distinct()
JP <- presence_data2 %>% filter(dataset == atlas_names[3]) %>% distinct()
EBBA <- presence_data2 %>% filter(dataset == atlas_names[4]) %>% distinct()


telfer_res_CZ <- sparta::telfer(taxa = CZ$verbatim_name,
                         site = CZ$cell_label,
                         time_period = CZ$tp,
                         minSite = 2)
telfer_res_CZ$dataset <- atlas_names[1]
telfer_res_NY <- sparta::telfer(taxa = NY$verbatim_name,
                         site = NY$cell_label,
                         time_period = NY$tp,
                         minSite = 2)
telfer_res_NY$dataset <- atlas_names[2]
telfer_res_JP <- sparta::telfer(taxa = JP$verbatim_name,
                         site = JP$cell_label,
                         time_period = JP$tp,
                         minSite = 2)
telfer_res_JP$dataset <- atlas_names[3]

telfer_res_EBBA <- sparta::telfer(taxa = EBBA$verbatim_name,
                         site = EBBA$cell_label,
                         time_period = EBBA$tp,
                         minSite = 2)
telfer_res_EBBA$dataset <- atlas_names[4]

telfer_res <- merge(telfer_res_CZ, telfer_res_NY, all =T)
telfer_res <- merge(telfer_res, telfer_res_JP, all =T)
telfer_res <- merge(telfer_res, telfer_res_EBBA, all =T)



telfer_res2 <- telfer_res %>% 
  select(taxa, Telfer_1_2, dataset) %>% 
  rename(verbatim_name = taxa)


species_data_new2 <- merge(species_data_new, telfer_res2, by=c("verbatim_name", "dataset"), all.x = T)

library(ggplot2)
## Plot
ggp1 <- ggplot(data = telfer_res2) +
  geom_histogram(aes(x = Telfer_1_2), bins = 20, 
                 bg = "lightgrey", col = "darkgrey")+
  theme_classic() +
  #xlim(-4, 4)+
  #ylim(0, 85)+ 
  # Add line for mean:
  geom_vline(xintercept = mean(telfer_res2$Telfer_1_2, na.rm=T),
             col = "red",
             lwd = 1) +
  # Add text for mean:
   annotate("text",                        
           x = mean(telfer_res2$Telfer_1_2, na.rm=T) -2.5,
           y = mean(telfer_res2$Telfer_1_2, na.rm=T) +80,
           label = paste("Mean =", 
                         round(mean(telfer_res2$Telfer_1_2, na.rm=T),
                               3)
                         ),
           col = "red",
           size = 6)+
  # Add line for mean:
    geom_vline(xintercept = median(telfer_res2$Telfer_1_2, na.rm=T), 
             col = "orange",
             lwd = 1) +
  # Add text for mean:
     annotate("text",                        
           x = mean(telfer_res2$Telfer_1_2, na.rm=T) -2.5,
           y = mean(telfer_res2$Telfer_1_2, na.rm=T) +70,
           label = paste("Median =", 
                         round(median(telfer_res2$Telfer_1_2, na.rm=T),
                               3)
                         ),
           col = "orange",
           size = 6)
ggp1
```

## Log Ratio (Temporal Change = Response)

```{r}


# Re-formating the data.. there is probably a smoother way to do it..
species_data_wide1 <- species_data_new2 %>% 
  select(verbatim_name, tp, cell_grouping, 
         D_AOO, m_AOO, AOO, Total_Ncells, 
          occupancy_Ncells, 
         relative_occupancy_Ncells, dataset) %>% 
  group_by(dataset, verbatim_name, tp) %>% 
  distinct() %>% 
  filter(tp == 1) %>% 
  setNames(paste0('tp1_', names(.))) %>% 
  ungroup() %>%
  select(-c(tp1_tp)) %>%
  rename(verbatim_name = tp1_verbatim_name,
         cell_grouping = tp1_cell_grouping, 
         dataset = tp1_dataset)

species_data_wide2 <- species_data_new2 %>% 
  select(verbatim_name, tp, cell_grouping, 
         D_AOO, m_AOO, AOO, Total_Ncells, 
          occupancy_Ncells, 
         relative_occupancy_Ncells, dataset) %>% 
  group_by(dataset, verbatim_name, tp) %>% 
  distinct() %>% 
  filter(tp == 2) %>% 
  setNames(paste0('tp2_', names(.))) %>% 
  ungroup() %>%
  select(-c(tp2_tp)) %>%
  rename(verbatim_name = tp2_verbatim_name,
         cell_grouping = tp2_cell_grouping, 
         dataset = tp2_dataset)


# merge back together:
temp <- merge(species_data_wide1, species_data_wide2, 
              by=intersect(names(species_data_wide1), names(species_data_wide2)))
names_v <- names(temp)[-(1:3)]

# Transform to wide format by cell_grouping
species_data_wide <- temp %>% 
  pivot_wider(names_from = cell_grouping,
              values_from = all_of(names_v))

log_ratio_data <- species_data_wide %>% 
  mutate(log_R2_1 = log(tp2_AOO_1/tp1_AOO_1), # for tp 1-2 comparison
         .before = 1) %>% # sort columns to the beginning of the table
  select(verbatim_name, log_R2_1) %>%
  mutate(log_R2_1 = round(log_R2_1, 2))

species_data_new3 <- merge(species_data_new2, log_ratio_data, by="verbatim_name")
species_data_new3 %>% write.csv(file=paste0(out_path, "Big_table_CZ_JP_NY.csv"))


species_data_new3 %>% group_by(dataset, tp, cell_grouping) %>% 
  select(verbatim_name, dataset, tp, cell_grouping, log_R2_1, AOO, relative_occupancy_Ncells, m_AOO, D_AOO, Telfer_1_2) %>%
  rstatix::get_summary_stats(type = "robust")

```

```{r}

cor_df <- species_data_new3 %>% select("tp", "scale", "AOO", "relative_occupancy_Ncells", "m_AOO", "b_AOO", "D_AOO", "Telfer_1_2", "log_R2_1")

cormat <- round(cor(cor_df, use="pairwise.complete.obs"),2)


library(reshape2)
melted_cormat <- melt(cormat)
head(melted_cormat)

library(ggplot2)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + 
  geom_tile()


reorder_cormat <- function(cormat){
# Use correlation between variables as distance
dd <- as.dist((1-cormat)/2)
hc <- hclust(dd)
cormat <-cormat[hc$order, hc$order]
}
cormat <- reorder_cormat(cormat)
melted_cormat <- melt(cormat)
head(melted_cormat)

library(ggplot2)
ggplot(data = melted_cormat, aes(x=Var1, y=Var2, fill=value)) + 
  geom_tile()+
   theme_minimal()+ # minimal theme
 theme(axis.text.x = element_text(angle = 45, vjust = 1, 
    size = 12, hjust = 1))+
 coord_fixed()



summary(lm(log_R2_1 ~ D_AOO, data = species_data_new3, na.action = na.omit))
summary(lm(Telfer_1_2 ~ D_AOO, data = species_data_new3, na.action = na.omit))
```
