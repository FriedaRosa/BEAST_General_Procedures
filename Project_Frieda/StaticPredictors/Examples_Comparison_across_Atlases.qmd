---
title: "Examples:Comparison across Atlases"
author: "Friederike WÃ¶lke"
format: html
editor: visual
---

### Plots: Comparing across Atlases

```{r}
rm(list=ls())
library(ggthemes); library(cowplot); library(gridExtra); library(dplyr); library(sf)
### The paths ===


source_atlas <- c("c:/Users/wolke/OneDrive - CZU v Praze/Datasets/Processed/Atlases/Replicated/")
source_predictors <- c("c:/Users/wolke/OneDrive - CZU v Praze/Dokumenty/PhD_Projects/StaticPredictors/Data/")
source_Git <- c("c:/Users/wolke/OneDrive - CZU v Praze/Dokumenty/GitHub/BEAST_General_Procedures/Project_Frieda/StaticPredictors/")

# folder path to atlas data
source_paths <- c(paste0(source_atlas, "Birds_Atlas_Czechia/"), 
                  paste0(source_atlas, "Birds_Atlas_New_York/"), 
                  paste0(source_atlas, "Birds_atlas_Japan/"), 
                  paste0(source_atlas, "Birds_atlas_EBBA/"))

# folder path to output folder
out_path <- c(paste0(source_Git, "out/"))

# create path to read in data and grids from variables
data_paths <- c(paste0(source_paths[1],"Birds_Atlas_Czechia_beast_data.rds"), 
                paste0(source_paths[2], "Birds_Atlas_New_York_beast_data.rds"), 
                paste0(source_paths[3], "Birds_atlas_Japan_beast_data.rds"),
                paste0(source_paths[4], "Birds_atlas_EBBA_beast_data.rds"))

grid_paths <- c(paste0(source_paths[1],"Birds_Atlas_Czechia_grid.gpkg"), 
                paste0(source_paths[2], "Birds_Atlas_New_York_grid.gpkg"), 
                paste0(source_paths[3], "Birds_atlas_Japan_grid.gpkg"),
                paste0(source_paths[4], "Birds_atlas_EBBA_grid.gpkg"))

atlas_names <- c("Birds_Atlas_Czechia", "Birds_Atlas_New_York","Birds_atlas_Japan", "Birds_atlas_EBBA")
# Define the desired order of factor levels
desired_levels <- factor(c("1", "2","4", "8", "16", "32", "64", "128"), ordered = T,  levels = c("1", "2","4", "8", "16", "32", "64", "128")) 


### The data ===

## We need the highes resolution data = cell_grouping = 1

# grid data
grids <- list()
for (a in seq_along(grid_paths)) {
    grids_a<- sapply("cell1grid", function(i) {
      st_read(grid_paths[[a]], paste(i), quiet = TRUE)  %>% st_transform(crs = 4326) %>% reorder_levels( cell_grouping, order=desired_levels)
      }, simplify = FALSE)
    grids[[a]] <- grids_a
}

# Raw species occurrence data
# Species data  =====================
presence_data_all <- list()
for (i in seq_along(data_paths)){
  pres_dat <- readRDS(data_paths[i])
  sy <- sort(unique(pres_dat$start_year))
  
## Add time-period column 
  pres_dat2 <- pres_dat %>%     
    filter(cell_grouping == 1) %>%
    mutate(tp = ifelse(start_year == sy[1], 1, 2)) %>% 
    reorder_levels( cell_grouping, order=desired_levels)
  
  ## Filter for cells that have been sampled twice ============== (!!)
  pres_dat3 <- pres_dat2 %>% ungroup() %>% 
    group_by(cell_label) %>%
    mutate(num_periods = n_distinct(tp)) %>%
    mutate(repeated = ifelse(num_periods == 2, 1, 0)) %>%
    filter(repeated == 1)
  
  ## Filter for species that have change data (sp that occur in both time periods)
  common_species <- pres_dat3 %>%
    group_by(verbatim_name) %>%
    summarise(num_periods = n_distinct(tp)) %>%
    filter(num_periods == 2) %>%
    pull(verbatim_name)
  
  pres_dat4 <- pres_dat3 %>% filter(verbatim_name %in% common_species)

  presence_data_all[[i]] <- pres_dat4
}

# remove tp3 from CZ data for easier handling of all datasets
presence_data_all[[1]] <- presence_data_all[[1]] %>% 
  filter(start_year != 2014)

##############


presence_sf_list <- readRDS(paste0(out_path, "presence_sf_list.rds"))
big_tab <- read.csv(file=paste0(out_path, "Big_table_CZ_JP_NY.csv")) %>% 
  reorder_levels(cell_grouping, desired_levels)


## Find all species that are found in all atlas periods and in all atlases !!

big_tab1 <- big_tab %>% select(verbatim_name, dataset, tp) %>% distinct()
grouped <- big_tab1 %>%
  group_by(verbatim_name) %>%
  # Filter for species that occur in all levels of dataset
  filter(n_distinct(dataset) == n_distinct(unique(big_tab$dataset))) %>%
  distinct()
unique_species <- unique(grouped$verbatim_name) 
## Nice, there are 15 species that are found in all atlases!!! Yass!!!!

print(unique_species)
sp <- unique_species



### Now we can write a Loop to run through this list of species and make the plots for all of them :) This will be funnnnnn 

## Save individual grids for plotting =====
grid_CZ <- grids[[1]]$cell1grid
grid_NY <- grids[[2]]$cell1grid
grid_JP <- grids[[3]]$cell1grid
grid_EU <- grids[[4]]$cell1grid

## Get the Borders for plotting =====
library(rnaturalearth) 
EU <- ne_countries(continent = "europe", scale = 10, returnclass='sf') %>% st_crop(st_bbox(grid_EU))
CZ <- ne_countries(country = "czechia", scale = 10,  returnclass='sf') %>% st_crop(st_bbox(grid_CZ))

JP <- ne_countries(country = "japan", scale = 10, returnclass='sf') %>% st_crop(st_bbox(grid_JP))
# Load world map data
USA <- ne_states(returnclass = "sf", country = 'United States of America') 
NY <- USA[USA$name == "New York", ]
NY <- NY  %>% st_crop(st_bbox(grid_NY)) 


plot_list <- list()
for (i in seq_along(sp)){
  print(sp[i])
  
  tryCatch({
  pres_dat_CZ <- presence_sf_list[[1]] %>% 
    filter(verbatim_name %in% sp[i]) %>% 
    left_join(., big_tab) %>% 
    distinct()
  pres_dat_NY <- presence_sf_list[[2]] %>% #
    filter(verbatim_name %in% sp[i]) %>% 
    left_join(., big_tab) %>% 
    distinct()
  pres_dat_JP <- presence_sf_list[[3]] %>% 
    filter(verbatim_name %in% sp[i]) %>% 
    left_join(., big_tab) %>% 
    distinct()
  pres_dat_EU <- presence_sf_list[[4]] %>% 
    filter(verbatim_name %in% sp[i]) %>% 
    left_join(., big_tab) %>% 
    distinct()
  }, error = function(err) {
})
  
  
    ## Plots ===
p_cz1 <- ggplot() + 
  geom_sf(data = grid_CZ, fill = NA)+
  geom_sf(data = pres_dat_CZ %>% filter(tp ==1 ), fill = "red")+
    geom_sf(data = CZ, fill = NA)+
  theme_bw()
p_cz2 <- ggplot() + 
  geom_sf(data = grid_CZ, fill = NA)+
  geom_sf(data = pres_dat_CZ %>% filter(tp ==2 ), fill = "red")+
    geom_sf(data = CZ, fill = NA)+
  theme_bw()

p_eu1 <- ggplot()+
  geom_sf(data = grid_EU, fill = NA)+
  geom_sf(data = pres_dat_EU %>% filter(tp ==1 ), fill = "red")+
      geom_sf(data = EU, fill = NA)+
  theme_bw()

p_eu2 <- ggplot()+
  geom_sf(data = grid_EU, fill = NA)+
  geom_sf(data = pres_dat_EU %>% filter(tp ==2 ), fill = "red")+
      geom_sf(data = EU, fill = NA)+
  theme_bw()

p_ny1 <- ggplot()+
  geom_sf(data = grid_NY, fill = NA)+
  geom_sf(data = pres_dat_NY %>% filter(tp ==1 ), fill = "red")+
      geom_sf(data = NY, fill = NA)+
  theme_bw()

p_ny2 <- ggplot()+
  geom_sf(data = grid_NY, fill = NA)+
  geom_sf(data = pres_dat_NY %>% filter(tp ==2 ), fill = "red")+
      geom_sf(data = NY, fill = NA)+
  theme_bw()

p_jp1 <- ggplot()+
  geom_sf(data = grid_JP, fill = NA)+
  geom_sf(data = pres_dat_JP %>% filter(tp ==1 ), fill = "red")+
      geom_sf(data = JP, fill = NA)+
  theme_bw()

p_jp2 <- ggplot()+
  geom_sf(data = grid_JP, fill = NA)+
  geom_sf(data = pres_dat_JP %>% filter(tp ==2 ), fill = "red")+
      geom_sf(data = JP, fill = NA)+
  theme_bw()
  
cz <- cowplot::plot_grid(p_cz1, p_cz2)
eu <- cowplot::plot_grid(p_eu1, p_eu2)
ny <- cowplot::plot_grid(p_ny1, p_ny2)
jp <- cowplot::plot_grid(p_jp1, p_jp2)
  
  sp_a <- big_tab  %>% filter(verbatim_name == sp[i]) 
gg1 <- ggplot(data = sp_a, aes(x = log10(mean_area), y = log10(AOO), col = dataset))+
    geom_point()+
    geom_smooth()+
    viridis::scale_color_viridis(discrete = T)+
    xlab("log Area")+
    ylab("log Occupancy")+
    labs(title = "Occupancy-Area Relationship", subtitle = paste(sp[i]))+
    theme_classic()+
    facet_wrap(tp~.)
  
  gg2 <- cowplot::plot_grid(gg1, NULL,  rel_heights = 0.5, rel_widths = 1, nrow=2)
  sum_tab <-  big_tab  %>% filter(verbatim_name == sp[i] & cell_grouping == 1) %>% select(verbatim_name, dataset, tp, AOO, relative_occupancy_area, D_AOO_s, log_R2_1, Telfer_1_2) %>% distinct()
  
pdf(file = paste0(out_path, sp[i], "_allAtlasMaps.pdf"), paper = "a4")

grid.arrange(tableGrob(sum_tab, theme = ttheme_minimal(base_size = 4)))
grid::grid.newpage() 
grid.arrange(cz)
grid.arrange(ny)
grid.arrange(eu)
grid.arrange(jp)
#grid::grid.newpage() 
grid.arrange(gg2)
dev.off()

plot_list[[i]] <- list(cz,eu,ny,jp, gg1)  
  
  
}
  
  
```