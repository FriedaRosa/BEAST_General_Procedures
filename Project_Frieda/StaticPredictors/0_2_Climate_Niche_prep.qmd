---
title: "0_2_Climate_Niche_prep"
format: html
editor: visual
---

## Libraries

```{r, message = F}
rm(list=ls())
gc()
library(sf)
sf_use_s2(FALSE)
library(terra)
library(dplyr)
library(ggplot2)
library(ggfortify)

pacman::p_load(rasterSp, climateNiche) ### require dependencies to be installed (see GitHub of these packages)

```

## Variables

```{r}

source_Git <- c("c:/Users/wolke/OneDrive - CZU v Praze/Dokumenty/GitHub/BEAST_General_Procedures/Project_Frieda/StaticPredictors/")

# folder path to output folder
out_path <- c(paste0(source_Git, "out/"))
source_predictors <- c("c:/Users/wolke/OneDrive - CZU v Praze/Dokumenty/PhD_Projects/StaticPredictors/Data/")
CHELSA_path <- paste0(source_predictors, "Chelsa_Bio_PET/")
CGIAR_path <- paste0(source_predictors, "CGIAR_PET/")

all_predictors <- readRDS(paste0(out_path, "All_predictors.rds"))
name_vector <- all_predictors %>% 
  dplyr::select(verbatim_name) %>% 
  na.omit() %>% 
  pull() %>% 
  unique() %>% 
  as.vector() 

# List all the .tif files in the directory
tif_files <- list.files(path=CHELSA_path, pattern = ".tif$")
# The input file geodatabase from BirdLife International
fgdb <-"c:/Users/wolke/OneDrive - CZU v Praze/Datasets/Raw/Distributions/Birds_of_the_world/BOTW.gdb"

```

## Read + Aggregate CHELSA

\~ 5 min

```{r}

# Initialize an empty list to store raster objects
raster_list <- list()
# Read each .tif file into a raster object and add to the list
for (file in tif_files) {
  r <- rast(paste0(CHELSA_path, file))
  target_resolution <- c(110) # Define the target resolution 
 
  r_aggregated <- aggregate(r, fact = target_resolution, fun = mean)
  raster_list[[file]] <- r_aggregated
}
saveRDS(raster_list, paste0(out_path, "CHELSA_raster_list.rds"))

# Transform Cspatial limate data to dataframes
r_df_list <- list()
for(i in seq_along(raster_list)){
  r_temp <- raster_list[[i]]
  r_df <- as.data.frame(r_temp , xy = TRUE)
  r_df$id <- c(1:nrow(r_df))
  r_df_list[[i]] <- r_df
}

# Merge climate vars together
bio1 <- full_join(r_df_list[[1]], r_df_list[[2]])
bio2 <- full_join(bio1, r_df_list[[3]]); rm(bio1)
bio3 <- full_join(bio2, r_df_list[[4]]); rm(bio2)
bio4 <- full_join(bio3, r_df_list[[5]]); rm(bio3)
bio5 <- full_join(bio4, r_df_list[[6]]); rm(bio4)
bio6 <- full_join(bio5, r_df_list[[7]]); rm(bio5)
bio7 <- full_join(bio6, r_df_list[[8]]); rm(bio6)
bio8 <- full_join(bio7, r_df_list[[9]]); rm(bio7)
bio9 <- full_join(bio8, r_df_list[[10]]); rm(bio8)
bio10 <- full_join(bio9, r_df_list[[11]]); rm(bio9)

# Save final climate output:
write.csv(bio10, paste0(out_path, "CHELSA_df.csv"))
saveRDS(bio10, paste0(out_path, "CHELSA_df.rds"))


```

### PET Data (does not work yet)

```{r}

## This does not work yet, because it comes at a different resolution and extend as the CHELSA data:

# ## PET Data: (from CGIAR: PET AI v3)
# 
# r_pet <- rast(paste0(CGIAR_path, "CIGAR_PET_et0_v3_yr.tif"))
# extent_r <- ext(r)
# r_pet3 <- resample(r_pet, r_aggregated)
# raster_list[[12]] <- r_pet3
# 
# bio11 <- full_join(bio10, r_df_list[[12]] %>% select(-id))


```

### PCA #1: on correlation matrix of climate

-   includes x and y coordinates in PCA?

-   scale? center?

```{r}
bio10 <- readRDS(paste0(out_path, "CHELSA_df.rds")) 
bio <- bio10 %>% select(-id)

# Step 2: Calculate the correlation matrix
cor_matrix <- cor(bio)

# Step 3: Perform PCA on the correlation matrix
pca_result1 <- prcomp(cor_matrix, center. = TRUE)
summary(pca_result1) # 2 axes cover 92% of variation (!)

# Step 4: Extract and interpret results
# Principal component scores
pca_scores <- pca_result$x

# Principal component loadings
pca_loadings <- pca_result$rotation

# Variance explained by each principal component
var_explained <- pca_result$sdev^2 / sum(pca_result$sdev^2)

# Plot the scree plot to visualize variance explained by each component
plot(var_explained, type = "b", main = "Scree Plot", xlab = "Principal Component", ylab = "Proportion of Variance Explained")

# Cumulative variance explained
cumulative_var_explained <- cumsum(var_explained)

# Plot cumulative variance explained
plot(cumulative_var_explained, type = "b", main = "Cumulative Variance Explained", xlab = "Number of Principal Components", ylab = "Cumulative Proportion of Variance Explained")

autoplot(pca_result)
biplot(pca_result)


```

### PCA #2: on raw climate data 

-   includes x and y into PCA

-   scale? center?

```{r}
Chelsa_df <- readRDS(paste0(out_path, "CHELSA_df.rds"))
Chelsa_sf <- st_as_sf(Chelsa_df, coords = c("x", "y"), crs = 4326)

clim_matrix <- Chelsa_df %>% select( -id) 
pca_result1 <- prcomp(clim_matrix, scale = T, center = T)
pca_result2 <- prcomp(clim_matrix)

# Compare scaled + centerd against untransformed:
summary(pca_result1) ## Low fit: Need 3 axes to cover 75% of variation
summary(pca_result2) ## Very high fit: Need 2 axes to cover 98% of variation

PCAs <- as.data.frame(pca_result$x[,1:2])

autoplot(pca_result, data = clim_matrix) 
autoplot(pca_result, data = PCAs)
biplot(pca_result)

#library(factoextra)

library(ggbiplot)
g <- ggbiplot(pca_result,
              obs.scale = 1,
              var.scale = 1,
              ellipse = TRUE,
              circle = TRUE,
              ellipse.prob = 0.68)

g

```

## BirdLife International Range maps

Reduce range maps to

-   species in the data

-   columns needed for the analysis

Merge with taxonomic information

```{r, eval = F, include = T}
# All_sp <- st_read(fgdb, layer = "All_Species") # Takes ~ 30 minutes to read in
# saveRDS(All_sp, paste0(out_path, "BOTW_All_species.rds"))

All_sp <- readRDS(paste0(out_path, "BOTW_All_species.rds"))

All_sp_red <- All_sp %>% 
  filter(sci_name %in% name_vector) %>% 
  select(sci_name, presence, origin, seasonal, Shape_Length, Shape_Area, Shape) %>%
  filter(seasonal %in% c(1,2) & origin %in% c(1,2) & presence %in% c(1,2,3))

Tax_sp <- st_read(fgdb, layer = "Taxonomic_checklist") # Global Red List status
Tax_sp_red <- Tax_sp %>% 
  filter(ScientificName %in% name_vector) %>% 
  select(Subfamily, Tribe, ScientificName, RL_Category) %>% 
  unique() %>% 
  rename("sci_name" = "ScientificName")

BirdLife <- left_join(All_sp_red, Tax_sp_red)
saveRDS(BirdLife, paste0(out_path, "BirdLife_reduced.rds"))
st_write(BirdLife, paste0(filedir, "SpeciesData_climateNiche/BirdLife.shp"), append=F)

```

### Species Niches via PCA

```{r}

climate_stack_agg <- readRDS(paste0(out_path, "climate_stack_agg.rds"))
range(climate_stack_agg)
pca_res <- prcomp(climate_stack_agg)
summary(pca_res)
autoplot(pca_res)


# Rasterize species range polygons  ======================================================
r_birds <- rasterizeRange(dsn=paste0(out_path, "SpeciesData_climateNiche/BirdLife.shp"),
                          id="sci_nam", touches=TRUE, save = TRUE, 
                          path = paste0(out_path, "SpeciesData_climateNiche/sp_rasters/"))

sp_v <- stringr::str_split(list.files(paste0(out_path, "sp_rasters/")), pattern = "_0.5.tif")
sp_v <- do.call(rbind, sp_v)[,1] 

## Read bird shapefiles back in ===========================================================

r_birds <- rast(paste0(out_path, "SpeciesData_climateNiche/sp_rasters/", 
                       list.files(paste0(out_path, "SpeciesData_climateNiche/sp_rasters/"), 
                                  pattern =".tif")))
names(r_birds) <- sp_v

# Extract species coordinates ===========================================================
try({
coords_sp <- list()
for(i in seq_along(sp_v)){
  r_b <- r_birds[[i]]
  r_b2 <- as.data.frame(r_b, xy=T)
  r_b2$species <- sp_v[i]
  r_b3 <- r_b2 %>% rename("Presence" = sp_v[i])
  coords_sp[[i]] <- r_b3
}
})

coords_df <- do.call(rbind,coords_sp)


# Loop through species to extract climate values  ======================================
sp_v <- unique(coords_df$species)
clim_vals_list <- list()
pca_all <- list()
for (i in seq_along(sp_v)){
  
  sp <- coords_df %>% filter(species == sp_v[i]) %>% select(-species, -Presence)
  clim_vals <- extract(climate_stack_agg, sp, xy=T, df=T) %>% data.frame()
  clim_vals$species = sp_v[i]
  clim_vals_list[[i]] <- clim_vals
  
  # PCA predictions:  ===========================================================
  sp_pca <- predict(pca_res, clim_vals[,2:14])[,1:2] %>% data.frame() %>% mutate(species = sp_v[i])

  pca_all[[i]] <- sp_pca
  
}


clim_vals_all <- do.call(rbind, clim_vals_list) 

saveRDS(clim_vals_all, paste0(out_path, "species_climate_df.rds"))
saveRDS(pca_all, paste0(out_path, "pca_all.rds"))

library(ggplot2); library(ggfortify)
ggplot()+
  geom_point(aes(x=PC1, y=PC2), col = "black", data= pca_res)+
    geom_point(aes(x=PC1, y=PC2), col = "blue", alpha = 0.2, data = pca_all[[1]])+
    geom_point(aes(x=PC1, y=PC2), col = "red", alpha = 0.2, data = pca_all[[2]])+
    geom_point(aes(x=PC1, y=PC2), col = "green", alpha = 0.1, data = pca_all[[3]])+
    geom_point(aes(x=PC1, y=PC2), col = "yellow", alpha = 0.1, data = pca_all[[4]])+
    geom_point(aes(x=PC1, y=PC2), col = "purple", alpha = 0.1, data = pca_all[[5]])
  

```

### Extract Niche Breadths (PC1, PC2) per species

```{r}


pca_all <-  readRDS(paste0(out_path, "pca_all.rds")) # Predicted values in PCA for species
all_niches <- list()
# Calculate niche breadth
for (i in seq_along(pca_all)){
  niche_breadth <- apply(pca_all[[i]][,1:2], 2, var, na.rm=T) 
  niche_breadth$species <- unique(pca_all[[i]]$species)
  all_niches[[i]] <- as.data.frame(niche_breadth)
}

Niches_df <-  plyr::rbind.fill(all_niches)[,1:3]%>% rename("verbatim_name" = "species") 

Niches_df$verbatim_name = gsub("_", " ",Niches_df$verbatim_name)
saveRDS(Niches_df, paste0(out_path, "Niches_df.rds"))

intersect(all_predictors$verbatim_name, Niches_df$verbatim_name)
all_predictors2 <-  left_join(all_predictors, Niches_df)

ggplot()+
  geom_point(data = Niches_df, aes(x = PC1, y = PC2, col = species), show.legend = F) +
  scale_color_manual()

saveRDS(all_predictors2, paste0(out_path, "all_predictors_niches.rds"))
  
```
